AWSTemplateFormatVersion: 2010-09-09

Description: Cloudformation template to deploy a VPC, with 3 public subnets spread across 3
  Availability Zones. It deploys an internet gateway, with a default route on
  the public subnets.

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Enter the IP range (CIDR notation) for VPC
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: Enter the IP range (CIDR notation) for public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/24
    Description: Enter the IP range (CIDR notation) for public subnet 2
    Type: String

  PublicSubnet3CIDR:
    Default: 10.0.2.0/24
    Description: Enter the IP range (CIDR notation) for public subnet 3
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.3.0/24
    Description: Enter the IP range (CIDR notation) for private subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.4.0/24
    Description: Enter the IP range (CIDR notation) for private subnet 2
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.0.5.0/24
    Description: Enter the IP range (CIDR notation) for private subnet 3
    Type: String

  AMIImage:
    Type: String
    Description: Please enter the AMI ImageId

  ProfileName:
    Default: dev
    Type: String
    Description: Enter the profile that you want this to run on either dev or demo

  DBPassword:
    Default: Qwerty12345
    Type: String
    Description: Database Password
  
  DBName:
    Default: csye6225
    Type: String
    Description: Database Name

  DNSName:
    Default: "dev.sasank.io."
    Type: String
    Description: DNS Name
  
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-VPC"]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW

  InternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-subnet-1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-subnet-2
      VpcId: !Ref VPC

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-subnet-3
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-subnet-1
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-subnet-2
      VpcId: !Ref VPC

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-subnet-3
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-routingTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: 
      - InternetGateway
      - InternetGatewayAttach
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, HTTPS, SSH and Webapp to EC2
      SecurityGroupIngress:
        #- IpProtocol: tcp
        #  FromPort: 80
        #  ToPort: 80
        #  CidrIp: 0.0.0.0/0
        #- IpProtocol: tcp
        #  FromPort: 443
        #  ToPort: 443
        #  CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          #CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: application

  DatabaseSecurityGroup:
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: database access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebAppSecurityGroup
      Tags:
        - Key: Name
          Value: database
      VpcId: !Ref VPC

  S3bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - Ref: "ProfileName"
          - "sasank.io"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Rule for S3 bucket
            Prefix: S3 images
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA

  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: My sql DB
      Family: mysql8.0
      Tags:
        - Key: Name
          Value: mysqlRDSparameter

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for mySQL database
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: csye6225
      MasterUsername: csye6225
      MasterUserPassword: Qwerty12345
      Engine: mysql
      EngineVersion: 8.0.28
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref DBSubnetGroup
      StorageType: gp2
      PubliclyAccessible: False
      AllocatedStorage: "20"
      VPCSecurityGroups:
        - !GetAtt "DatabaseSecurityGroup.GroupId"
        - !Ref DatabaseSecurityGroup
      DBInstanceIdentifier: "csye6225"
      MultiAZ: False

  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: "/"

  DemoInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: demo-ec2-instance-profile
      Path: /
      Roles:
        - !Ref RootRole

  RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:DeleteObject"
            Resource:
              - !Sub arn:aws:s3:::${S3bucket}
              - !Sub arn:aws:s3:::${S3bucket}/*
      Roles:
        - Ref: RootRole

  # MyEC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     IamInstanceProfile: !Ref DemoInstanceProfile
  #     ImageId: !Ref AMIImage
  #     InstanceType: t2.micro
  #     KeyName: testkey
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: "true"
  #         DeviceIndex: "0"
  #         GroupSet:
  #           - Ref: WebAppSecurityGroup
  #         SubnetId:
  #           Ref: PublicSubnet1
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         echo export RDS="${RDSInstance.Endpoint.Address}" >> /etc/environment
  #         echo export DB_HOST="${RDSInstance.Endpoint.Address}" >> /etc/environment
  #         echo export DB_USER="csye6225" >> /etc/environment
  #         echo export SQL_ROOT="csye6225" >> /etc/environment
  #         echo export SQL_PASS="${DBPassword}" >> /etc/environment
  #         echo export DB_PASSWORD="${DBPassword}" >> /etc/environment
  #         echo export DB_NAME="${DBName}" >> /etc/environment
  #         echo export bucket="${S3bucket}" >> /etc/environment 
  #         echo export AWS_BUCKET_NAME="${S3bucket}" >> /etc/environment
  #         echo export AWS_BUCKET_REGION="us-east-1" >> /etc/environment
  #         echo export AWS_REGION="us-east-1" >> /etc/environment
  #         echo export DB="csye6225" >> /etc/environment
  #         echo export region="us-east-1" >> /etc/environment
  #         sleep 10
  #         sudo pm2 restart all --update-env


  LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Load Balancer Security Group
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: Load Balancer
        VpcId: !Ref VPC

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebServerAutoScalingGroup
      Cooldown: 60
      LaunchConfigurationName: !Ref asglaunchconfig
      MinSize: "1"
      MaxSize: "5"
      DesiredCapacity: "1"
      VPCZoneIdentifier:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      - !Ref PublicSubnet3
      TargetGroupARNs:
      - !Ref LoadBalancerTargetGroup
      Tags:
        - Key: Name
          Value: Web Server Autoscaling Group
          PropagateAtLaunch: "true"

  LoadBalancer:
    DependsOn: InternetGatewayAttach
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: ApplicationLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Type: application

  LoadBalancerTargetGroup:
    DependsOn: LoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthz
      # HealthCheckTimeoutSeconds: 5
      Name: LoadBalancerTargetGroup
      HealthyThresholdCount: 3
      Port: 3000
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      Matcher:
        HttpCode: "200"
      VpcId: !Ref VPC
      TargetType: instance
      Tags:
        - Key: Name
          Value: LoadBalancerTargetGroup

  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: LoadBalancerTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: "80"
      Protocol: HTTP

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "10"
      AlarmDescription: Alarm if CPU utilization more than 10%
      Period: "300"
      AlarmActions:
      - !Ref ScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebServerAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "7.5"
      AlarmDescription: Alarm if CPU utilization is less than 7.5%
      Period: "300"
      AlarmActions:
      - !Ref ScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebServerAutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: -1

  asglaunchconfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: "true"
      InstanceType: t2.micro
      KeyName: testkey
      ImageId: !Ref AMIImage
      IamInstanceProfile: !Ref DemoInstanceProfile
      SecurityGroups:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo export RDS="${RDSInstance.Endpoint.Address}" >> /etc/environment
          echo export DB_HOST="${RDSInstance.Endpoint.Address}" >> /etc/environment
          echo export DB_USER="csye6225" >> /etc/environment
          echo export SQL_ROOT="csye6225" >> /etc/environment
          echo export SQL_PASS="${DBPassword}" >> /etc/environment
          echo export DB_PASSWORD="${DBPassword}" >> /etc/environment
          echo export DB_NAME="${DBName}" >> /etc/environment
          echo export bucket="${S3bucket}" >> /etc/environment 
          echo export AWS_BUCKET_NAME="${S3bucket}" >> /etc/environment
          echo export AWS_BUCKET_REGION="us-east-1" >> /etc/environment
          echo export AWS_REGION="us-east-1" >> /etc/environment
          echo export DB="csye6225" >> /etc/environment
          echo export region="us-east-1" >> /etc/environment
          sleep 10
          sudo pm2 restart all --update-env

  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref DNSName
      Comment: Zone apex alias targeted to LoadBalancer.
      RecordSets:
        - Name: !Ref DNSName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt "LoadBalancer.CanonicalHostedZoneID"
            DNSName: !GetAtt "LoadBalancer.DNSName"

  CodeDeployEC2S3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - 's3:Get*'
            - 's3:List*'
          Resource:
              - arn:aws:s3:::codedeploy.sasank.io
              - arn:aws:s3:::codedeploy.sasank.io/*
      Roles:
        - !Ref RootRole

  GHUploadToS3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: GH-Upload-To-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - 's3:Get*'
            - 's3:List*'
            - 's3:PutObject'
          Resource:
              - arn:aws:s3:::codedeploy.sasank.io
              - arn:aws:s3:::codedeploy.sasank.io/*
      Users: 
        - ghactions-app

  GHCodeDeploy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GHCodeDeploy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'codedeploy:RegisterApplicationRevision'
              - 'codedeploy:GetApplicationRevision'
            Resource: 
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":application:",!Ref CodeDeployApplication,],]
          - Effect: Allow
            Action:
              - 'codedeploy:CreateDeployment'
              - 'codedeploy:GetDeployment'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'codedeploy:GetDeploymentConfig'
            Resource:
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.OneAtATime",],]
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.HalfAtATime",],]
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.AllAtOnce",],]
      Users:
        - ghactions-app
  GHEC2AMI:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: gh-ec2-ami
      PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CopyImage
              - ec2:CreateImage
              - ec2:CreateKeypair
              - ec2:CreateSecurityGroup
              - ec2:CreateSnapshot
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:DeleteKeyPair
              - ec2:DeleteSecurityGroup
              - ec2:DeleteSnapshot
              - ec2:DeleteVolume
              - ec2:DeregisterImage
              - ec2:DescribeImageAttribute
              - ec2:DescribeImages
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - ec2:DescribeRegions
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSnapshots
              - ec2:DescribeSubnets
              - ec2:DescribeTags
              - ec2:DescribeVolumes
              - ec2:DetachVolume
              - ec2:GetPasswordData
              - ec2:ModifyImageAttribute
              - ec2:ModifyInstanceAttribute
              - ec2:ModifySnapshotAttribute
              - ec2:RegisterImage
              - ec2:RunInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
            Resource:
              - '*'      
      Users:
          - ghactions-app

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: "/"

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server
      ApplicationName: csye6225webapp
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: CodeDeployApplication 
    Properties:
      DeploymentGroupName: csye6225-webapp-deployment
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events: 
          - DEPLOYMENT_FAILURE
      Ec2TagFilters:
        - Key: Name
          Value: Web Server Autoscaling Group
          Type: KEY_AND_VALUE
